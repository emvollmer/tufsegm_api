"""Fixtures module for api predict. This is a configuration file designed
to prepare the tests function arguments on the test_*.py files located in
the same folder.

You can add new fixtures following the next structure:
```py
@pytest.fixture(scope="module", params=[{list of possible arguments}])
def argument_name(request):
    # You can add setup code here for your argument/fixture
    return request.param  # Argument that will be passed to the test
```
The fixture argument `request` includes the parameter generated by the
`params` list. Every test in the folder that uses the fixture will be run
at least once with each of the values inside `params` list unless specified
otherwise. The parameter is stored inside `request.param`.

When multiple fixtures are defined with more than one parameter, every tests
will run multiple times, each with one of all the possible combinations of
the generated parameters unless specified otherwise. For example, in the
following configuration:
```py
@pytest.fixture(scope="module", params=['a','b'])
def my_fixture1(request):
    return request.param

@pytest.fixture(scope="module", params=['x','y'])
def my_fixture2(request):
    return request.param
```
The for the test functions in this folder, the following combinations will
be generated:
    - Tests that use only one my_fixture1: ['a','b']
    - Tests that use only one my_fixture2: ['x','y']
    - Tests that use both: [('a','x'), ('a','y'), ('b','x'), ('b','y')]
    - Tests that use none of the fixtures: []

Be careful when using multiple fixtures with multiple parameters, as the
number of tests generated can grow exponentially.
"""
# pylint: disable=redefined-outer-name
import pytest

import api


@pytest.fixture(scope="module", params=["2024-04-24_17-57-17"])
def model_dir(request):
    """Fixture to provide the model_name argument to api.predict."""
    return f"{api.config.MODELS_PATH}/{request.param}"


@pytest.fixture(scope="module", params=["images/KA_02/DJI_0_0001_R.npy"])
def input_file(request):
    """Fixture to provide the input_file argument to api.predict."""
    return request.param


@pytest.fixture(scope="module", params=[False])
def display(request):
    """Fixture to provide the display argument to api.predict."""
    return request.param


@pytest.fixture(scope="module", params=["application/json"])
def accept(request):
    """Fixture to provide the accept argument to api.predict."""
    return request.param


# Example of fixture for a batch_size parametrization
# @pytest.fixture(scope="module", params=[None, 20])
# def batch_size(request):
#     """Fixture to provide the batch_size option to api.predict."""
#     return request.param


# Example of fixture for a steps parametrization
# @pytest.fixture(scope="module", params=[None, 2])
# def steps(request):
#     """Fixture to provide the steps option to api.predict."""
#     return request.param
