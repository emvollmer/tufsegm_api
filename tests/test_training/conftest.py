"""Fixtures module for api training. This is a configuration file designed
to prepare the tests function arguments on the test_*.py files located in
the same folder.

You can add new fixtures following the next structure:
```py
@pytest.fixture(scope="module", params=[{list of possible arguments}])
def argument_name(request):
    # You can add setup code here for your argument/fixture
    return request.param  # Argument that will be passed to the test
```
The fixture argument `request` includes the parameter generated by the
`params` list. Every test in the folder that uses the fixture will be run
at least once with each of the values inside `params` list unless specified
otherwise. The parameter is stored inside `request.param`.

When multiple fixtures are defined with more than one parameter, every tests
will run multiple times, each with one of all the possible combinations of
the generated parameters unless specified otherwise. For example, in the
following configuration:
```py
@pytest.fixture(scope="module", params=['a','b'])
def my_fixture1(request):
    return request.param

@pytest.fixture(scope="module", params=['x','y'])
def my_fixture2(request):
    return request.param
```
The for the test functions in this folder, the following combinations will
be generated:
    - Tests that use only one my_fixture1: ['a','b']
    - Tests that use only one my_fixture2: ['x','y']
    - Tests that use both: [('a','x'), ('a','y'), ('b','x'), ('b','y')]
    - Tests that use none of the fixtures: []

Be careful when using multiple fixtures with multiple parameters, as the
number of tests generated can grow exponentially.
"""
# pylint: disable=redefined-outer-name
import pytest

import api


# todo: params=[None] causes KeyError because it doesn't make mlflow_username a proper parameter
@pytest.fixture(scope="module", params=[None])
def mlflow_username(request):
    """Fixture to provide the mlflow_username argument to api.train."""
    return request.param


@pytest.fixture(scope="module", params=["mobilenetv2"])
def backbone(request):
    """Fixture to provide the backbone argument to api.train."""
    return request.param


@pytest.fixture(scope="module", params=["None"])
def weights(request):
    """Fixture to provide the weights argument to api.train."""
    return request.param


@pytest.fixture(scope="module")
def dataset_path(request):
    """Fixture to provide the dataset_path argument to api.train."""
    return api.config.DATA_PATH


@pytest.fixture(scope="module", params=[False])
def save_for_viewing(request):
    """Fixture to provide the save_for_viewing argument to api.train."""
    return request.param


@pytest.fixture(scope="module", params=[0.2])
def test_size(request):
    """Fixture to provide the test_size argument to api.train."""
    return request.param


@pytest.fixture(scope="module", params=[4])
def channels(request):
    """Fixture to provide the channels argument to api.train."""
    return request.param


@pytest.fixture(scope="module", params=["basic"])
def processing(request):
    """Fixture to provide the processing argument to api.train."""
    return request.param


@pytest.fixture(scope="module", params=["160x128"])
def img_size(request):
    """Fixture to provide the img_size argument to api.train."""
    return request.param


@pytest.fixture(scope="module", params=[1])
def epochs(request):
    """Fixture to provide the epochs argument to api.train."""
    return request.param


@pytest.fixture(scope="module", params=[1])
def batch_size(request):
    """Fixture to provide the batch_size argument to api.train."""
    return request.param


@pytest.fixture(scope="module", params=[0.001])
def lr(request):
    """Fixture to provide the lr argument to api.train."""
    return request.param


@pytest.fixture(scope="module", params=[42])
def seed(request):
    """Fixture to provide the seed argument to api.train."""
    return request.param


# Example of fixture for shuffle parametrization
# @pytest.fixture(scope="module", params=[None, False])
# def shuffle(request):
#     """Fixture to provide the shuffle option to api.train."""
#     return request.param


# Example of fixture for validation_split parametrization
# @pytest.fixture(scope="module", params=[None, 0.1])
# def validation_split(request):
#     """Fixture to provide the validation_split option to api.train."""
#     return request.param
