"""Testing module for api metadata. This is a test file designed to use pytest
and prepared with some basic assertions as base to add your own tests.

You can add new tests using the following structure:
```py
def test_{description for the test}(metadata):
    # Add your assertions inside the test function
    assert {statement_1 that returns true or false}
    assert {statement_2 that returns true or false}
```
The conftest.py module in the same directory includes the fixture to return
to your tests inside the argument variable `metadata` the value generated by
your function defined at `api.get_metadata`.

If your file grows in complexity, you can split it into multiple files in
the same folder. However, remember to add the prefix `test_` to the file.
"""
# pylint: disable=redefined-outer-name
# pylint: disable=unused-argument
from pathlib import Path


def test_authors(metadata):
    """Tests that metadata provides authors information."""
    assert "author" in metadata
    assert metadata["author"] == ["Elena Vollmer"]


def test_emails(metadata):
    """Tests that metadata provides email information."""
    assert "author-email" in metadata
    assert metadata["author-email"] == {
        "Elena Vollmer": "elena.vollmer@kit.edu"
    }


def test_description(metadata):
    """Tests that metadata provides description information."""
    assert "description" in metadata
    assert metadata["description"] == "Deepaas API for thermal urban feature semantic segmentation model repo"


def test_license(metadata):
    """Tests that metadata provides license information."""
    assert "license" in metadata
    assert metadata["license"] == "BSD-3-Clause"


def test_version(metadata):
    """Tests that metadata provides version information."""
    assert "version" in metadata
    assert isinstance(metadata["version"], str)
    assert all(v.isnumeric() for v in metadata["version"].split("."))
    assert len(metadata["version"].split(".")) == 3


def test_datasets_local(metadata):
    """Tests that metadata provides local dataset directories."""
    assert "datasets_local" in metadata
    assert isinstance(metadata["datasets_local"], list), "'datasets_local' isn't a list."
    assert all(isinstance(v, str) for v in metadata["datasets_local"]), "Not all elements in 'datasets_local' are strings."
    assert all(Path(v).is_dir() for v in metadata["datasets_local"]), "Not all elements in 'datasets_local' are valid directories."


def test_datasets_remote(metadata):
    """Tests that metadata provides remote dataset directories."""
    assert "datasets_remote" in metadata
    assert isinstance(metadata["datasets_remote"], list), "'datasets_remote' isn't a list."
    assert all(isinstance(v, str) for v in metadata["datasets_remote"]), "Not all elements in 'datasets_remote' are strings."


def test_models_local(metadata):
    """Tests that metadata provides local model directories."""
    assert "models_local" in metadata
    assert isinstance(metadata["models_local"], list), "'models_local' isn't a list."
    assert all(isinstance(v, str) for v in metadata["models_local"]), "Not all elements in 'models_local' are strings."
    assert all(Path(v).is_dir() for v in metadata["models_local"]), "Not all elements in 'models_local' are valid directories."


def test_models_remote(metadata):
    """Tests that metadata provides remote model directories."""
    assert "models_remote" in metadata
    assert isinstance(metadata["models_remote"], list), "'models_remote' isn't a list."
    assert all(isinstance(v, str) for v in metadata["models_remote"]), "Not all elements in 'models_remote' are strings."
